name: u34 homework workflow
run-name: u34 homework workflow run on ${{ github.event_name }} event
on:
  pull_request:
#    paths:
#      - 'app/**'
#      - 'Dockerfile'
#      - 'requirements.txt'

env:
  TEST_TAG: metodil/my-hello-app:test
  IMAGE_TAG: metodil/my-hello-app:latest
#  RUNSONIMAGE: 'ubuntu-latest'

jobs:
  editorconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: gaurav-nelson/github-action-markdown-link-check@v1

  lint-unit-test:
    runs-on: ubuntu-latest
    needs: [ editorconfig, markdown-link-check ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.8'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test with pytest
        run: |
          pip install pytest pytest-cov flake8
          cd app
          python -m unittest app_test.py
      - name: Run flake8 linting
        run: flake8 app/
      - name: Analysing the code with pylint
        run: |
          pylint $(git ls-files '*.py')

#  trivy-test:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Run Trivy vulnerability scanner in fs mode
#      uses: aquasecurity/trivy-action@0.28.0
#      with:
#        scan-type: 'fs'
#        scan-ref: 'app/'
#        trivy-config: trivy.yaml
#
#  lint-test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v4
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.x'
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8
#      - name: Run flake8 linting
#        run: flake8 app/
#
#
#  build-test-push:
#    name: Build Dockerfile, test container with trivy if ok push to registry
#    runs-on: ubuntu-latest
#    steps:
#      - name: Import Secrets from Hashi vault
#        id: import-secrets
#        uses: hashicorp/vault-action@v2
#        with:
#          url: https://vault.elcomp68.com:8200
#          token: ${{ secrets.HV_U34_TOKEN }}
#          caCertificate: ${{ secrets.VAULT_CA_CERT }}
#          secrets: |
#              kv/data/u34-ci dockerhub_username | DOCKERHUB_USERNAME ;
#              kv/data/u34-ci dockerhub_token | DOCKERHUB_TOKEN ;
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ env.DOCKERHUB_USERNAME }}
#          password: ${{ env.DOCKERHUB_TOKEN }}
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Build and export to Docker
#        uses: docker/build-push-action@v6
#        with:
#          load: true
#          tags: ${{ env.TEST_TAG }}
#      - name: Scan Docker image with Trivy
#        uses: aquasecurity/trivy-action@0.28.0
#        with:
#          image-ref: ${{ env.TEST_TAG }}   # Image to scan (can use a local build or a pre-pushed image)
#          format: 'table'       # Output format (can be 'table', 'json', 'template', etc.)
#          severity: 'HIGH,CRITICAL'  # Only show HIGH and CRITICAL vulnerabilities (optional)
#          exit-code: '1'         # Set exit code 1 if vulnerabilities are found (optional)
#
#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#          push: true
#          tags: ${{ env.IMAGE_TAG }}
#        if: success()  # Only push if test is ok